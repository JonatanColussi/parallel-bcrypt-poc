import bcrypt from 'bcrypt';

const payload = {
  document: '86644319068',
  accessPassword: [
    '63616665',
    '62606664',
    '72606664',
    '63606664',
    '73606664',
    '62706664',
    '72706664',
    '63706664',
    '73706664',
    '62616664',
    '72616664',
    '63616664',
    '73616664',
    '62716664',
    '72716664',
    '63716664',
    '73716664',
    '62607664',
    '72607664',
    '63607664',
    '73607664',
    '62707664',
    '72707664',
    '63707664',
    '73707664',
    '62617664',
    '72617664',
    '63617664',
    '73617664',
    '62717664',
    '72717664',
    '63717664',
    '73717664',
    '62606764',
    '72606764',
    '63606764',
    '73606764',
    '62706764',
    '72706764',
    '63706764',
    '73706764',
    '62616764',
    '72616764',
    '63616764',
    '73616764',
    '62716764',
    '72716764',
    '63716764',
    '73716764',
    '62607764',
    '72607764',
    '63607764',
    '73607764',
    '62707764',
    '72707764',
    '63707764',
    '73707764',
    '62617764',
    '72617764',
    '63617764',
    '73617764',
    '62717764',
    '72717764',
    '63717764',
    '73717764',
    '62606674',
    '72606674',
    '63606674',
    '73606674',
    '62706674',
    '72706674',
    '63706674',
    '73706674',
    '62616674',
    '72616674',
    '63616674',
    '73616674',
    '62716674',
    '72716674',
    '63716674',
    '73716674',
    '62607674',
    '72607674',
    '63607674',
    '73607674',
    '62707674',
    '72707674',
    '63707674',
    '73707674',
    '62617674',
    '72617674',
    '63617674',
    '73617674',
    '62717674',
    '72717674',
    '63717674',
    '73717674',
    '62606774',
    '72606774',
    '63606774',
    '73606774',
    '62706774',
    '72706774',
    '63706774',
    '73706774',
    '62616774',
    '72616774',
    '63616774',
    '73616774',
    '62716774',
    '72716774',
    '63716774',
    '73716774',
    '62607774',
    '72607774',
    '63607774',
    '73607774',
    '62707774',
    '72707774',
    '63707774',
    '73707774',
    '62617774',
    '72617774',
    '63617774',
    '73617774',
    '62717774',
    '72717774',
    '63717774',
    '73717774',
    '62606665',
    '72606665',
    '63606665',
    '73606665',
    '62706665',
    '72706665',
    '63706665',
    '73706665',
    '62616665',
    '72616665',
    '63616665',
    '73616665',
    '62716665',
    '72716665',
    '63716665',
    '73716665',
    '62607665',
    '72607665',
    '63607665',
    '73607665',
    '62707665',
    '72707665',
    '63707665',
    '73707665',
    '62617665',
    '72617665',
    '63617665',
    '73617665',
    '62717665',
    '72717665',
    '63717665',
    '73717665',
    '62606765',
    '72606765',
    '63606765',
    '73606765',
    '62706765',
    '72706765',
    '63706765',
    '73706765',
    '62616765',
    '72616765',
    '63616765',
    '73616765',
    '62716765',
    '72716765',
    '63716765',
    '73716765',
    '62607765',
    '72607765',
    '63607765',
    '73607765',
    '62707765',
    '72707765',
    '63707765',
    '73707765',
    '62617765',
    '72617765',
    '63617765',
    '73617765',
    '62717765',
    '72717765',
    '63717765',
    '73717765',
    '62606675',
    '72606675',
    '63606675',
    '73606675',
    '62706675',
    '72706675',
    '63706675',
    '73706675',
    '62616675',
    '72616675',
    '63616675',
    '73616675',
    '62716675',
    '72716675',
    '63716675',
    '73716675',
    '62607675',
    '72607675',
    '63607675',
    '73607675',
    '62707675',
    '72707675',
    '63707675',
    '73707675',
    '62617675',
    '72617675',
    '63617675',
    '73617675',
    '62717675',
    '72717675',
    '63717675',
    '73717675',
    '62606775',
    '72606775',
    '63606775',
    '73606775',
    '62706775',
    '72706775',
    '63706775',
    '73706775',
    '62616775',
    '72616775',
    '63616775',
    '73616775',
    '62716775',
    '72716775',
    '63716775',
    '73716775',
    '62607775',
    '72607775',
    '63607775',
    '73607775',
    '62707775',
    '72707775',
    '63707775',
    '73707775',
    '62617775',
    '72617775',
    '63617775',
    '73617775',
    '62717775',
    '72717775',
    '63717775',
    '73717775',
  ],
};

(async () => {
  console.time('promiseRace');
  const hashedPassword = await bcrypt.hash('63616665', 12);

  Promise.race(
    payload.accessPassword.map((password, index) => {
      return new Promise(resolve => {
        const valid = bcrypt.compareSync(password, hashedPassword);

        console.log(index, valid);

        if (valid) {
          console.log('aqui');
          resolve(password);
        }
      });
    }),
  ).then(value => {
    console.log(value);
  });

  // console.log('another');
  // console.log(validPassword);
  // console.timeEnd('promiseRace');
})();
